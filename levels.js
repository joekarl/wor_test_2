"use strict";

const LEVELS = [
  // level 0
  [
    [ 0b000000, 0b000101, 0b000110, 0b000100, 0b000110, 0b000110, 0b000110, 0b001100, 0b000000],
    [ 0b000000, 0b000001, 0b000110, 0b001010, 0b000101, 0b000110, 0b000110, 0b001000, 0b000000],
    [ 0b010110, 0b000000, 0b000110, 0b000100, 0b001000, 0b000101, 0b000100, 0b000000, 0b010110],
    [ 0b000000, 0b000001, 0b001100, 0b000011, 0b000000, 0b000010, 0b000010, 0b001000, 0b000000],
    [ 0b000000, 0b001001, 0b000001, 0b000100, 0b000000, 0b000100, 0b000110, 0b001000, 0b000000],
    [ 0b000000, 0b000011, 0b001010, 0b000011, 0b001010, 0b000011, 0b000110, 0b001010, 0b000000],
    [ 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b001011, 0b000000]
  ],
  // level 1
  [
    [ 0b000000, 0b000101, 0b000110, 0b000100, 0b000110, 0b000110, 0b000110, 0b001100, 0b000000],
    [ 0b000000, 0b000001, 0b000110, 0b001010, 0b000101, 0b000110, 0b000110, 0b001000, 0b000000],
    [ 0b010110, 0b000000, 0b000110, 0b000100, 0b001000, 0b000101, 0b000100, 0b000000, 0b010110],
    [ 0b000000, 0b000001, 0b001100, 0b000011, 0b000000, 0b000010, 0b000010, 0b001000, 0b000000],
    [ 0b000000, 0b001001, 0b000001, 0b000100, 0b000000, 0b000100, 0b000110, 0b001000, 0b000000],
    [ 0b000000, 0b000011, 0b001010, 0b000011, 0b001010, 0b000011, 0b000110, 0b001010, 0b000000],
    [ 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b001011, 0b000000]
  ],
  // level 2
  [
    [ 0b000000, 0b000101, 0b000110, 0b000100, 0b000110, 0b000110, 0b000110, 0b001100, 0b000000],
    [ 0b000000, 0b000001, 0b000110, 0b001010, 0b000101, 0b000110, 0b000110, 0b001000, 0b000000],
    [ 0b010110, 0b000000, 0b000110, 0b000100, 0b001000, 0b000101, 0b000100, 0b000000, 0b010110],
    [ 0b000000, 0b000001, 0b001100, 0b000011, 0b000000, 0b000010, 0b000010, 0b001000, 0b000000],
    [ 0b000000, 0b001001, 0b000001, 0b000100, 0b000000, 0b000100, 0b000110, 0b001000, 0b000000],
    [ 0b000000, 0b000011, 0b001010, 0b000011, 0b001010, 0b000011, 0b000110, 0b001010, 0b000000],
    [ 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b001011, 0b000000]
  ],
  // level 3
  [
    [ 0b000000, 0b000101, 0b000110, 0b000100, 0b000110, 0b000110, 0b000110, 0b001100, 0b000000],
    [ 0b000000, 0b000001, 0b000110, 0b001010, 0b000101, 0b000110, 0b000110, 0b001000, 0b000000],
    [ 0b010110, 0b000000, 0b000110, 0b000100, 0b001000, 0b000101, 0b000100, 0b000000, 0b010110],
    [ 0b000000, 0b000001, 0b001100, 0b000011, 0b000000, 0b000010, 0b000010, 0b001000, 0b000000],
    [ 0b000000, 0b001001, 0b000001, 0b000100, 0b000000, 0b000100, 0b000110, 0b001000, 0b000000],
    [ 0b000000, 0b000011, 0b001010, 0b000011, 0b001010, 0b000011, 0b000110, 0b001010, 0b000000],
    [ 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b001011, 0b000000]
  ],
  // level 4
  [
    [ 0b000000, 0b000101, 0b000110, 0b000100, 0b000110, 0b000110, 0b000110, 0b001100, 0b000000],
    [ 0b000000, 0b000001, 0b000110, 0b001010, 0b000101, 0b000110, 0b000110, 0b001000, 0b000000],
    [ 0b010110, 0b000000, 0b000110, 0b000100, 0b001000, 0b000101, 0b000100, 0b000000, 0b010110],
    [ 0b000000, 0b000001, 0b001100, 0b000011, 0b000000, 0b000010, 0b000010, 0b001000, 0b000000],
    [ 0b000000, 0b001001, 0b000001, 0b000100, 0b000000, 0b000100, 0b000110, 0b001000, 0b000000],
    [ 0b000000, 0b000011, 0b001010, 0b000011, 0b001010, 0b000011, 0b000110, 0b001010, 0b000000],
    [ 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b001011, 0b000000]
  ]

];

const isValidGridPosition = (gridXY, level) => {
  const levelWidth = level[0].length;
  const levelHeight = level.length;
  return (gridXY.x >= 0 &&
          gridXY.x < levelWidth &&
          gridXY.y >= 0 &&
          gridXY.y < levelHeight);
};

const canMoveInDirection = (gridXY, direction, level, warpTimeout) => {
  if (direction.isZero() || !isValidGridPosition(vec2Add(gridXY, direction), level)) {
    return false;
  }

  // build a direction mask we can compare to our grid location
  var directionMask = 0b0000;
  if (direction.x == 1) {
    directionMask |= GRID_FLAGS.WALL_RIGHT;
  } else if (direction.x == -1) {
    directionMask |= GRID_FLAGS.WALL_LEFT;
  } else if (direction.y == 1) {
    directionMask |= GRID_FLAGS.WALL_DOWN;
  } else if (direction.y == -1) {
    directionMask |= GRID_FLAGS.WALL_UP;
  }

  var levelTile = level[gridXY.y][gridXY.x];
  const nextGridXY = vec2Add(gridXY, direction);
  const nextLevelTile = level[nextGridXY.y][nextGridXY.x];
  if (nextLevelTile & GRID_FLAGS.WRAP_POINT && warpTimeout > 0) {
    // we need to block one of our directions
    if (nextGridXY.x == 0) {
      levelTile |= GRID_FLAGS.WALL_LEFT;
    } else {
      levelTile |= GRID_FLAGS.WALL_RIGHT;
    }
  }

  // we're blocked if we match any of wall flags
  const isBlocked = (levelTile & directionMask);
  return !isBlocked;
};
